//Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
//Output: [3,9,20,null,null,15,7]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int postIndex;
    private HashMap<Integer, Integer>inorderMap;
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postIndex = postorder.length - 1;
        inorderMap = new HashMap<>();

        for(int i = 0; i<inorder.length; i++)
            inorderMap.put(inorder[i], i);

        return construct(inorder, postorder, 0, inorder.length-1);
    }

    private TreeNode construct(int[] inorder, int[] postorder, int start, int end){
        if(start > end)
            return null;

        int rootVal = postorder[postIndex--];
        TreeNode root = new TreeNode(rootVal);

        int rootIndex = inorderMap.get(rootVal);
        root.right = construct(inorder, postorder, rootIndex + 1, end);
        root.left = construct(inorder, postorder, start,  rootIndex-1);

        return root;
    }
}
