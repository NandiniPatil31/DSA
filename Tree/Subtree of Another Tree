//Input: root = [3,4,5,1,2], subRoot = [4,1,2]  Output: true

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null)
            return false;

        if(isSameTree(root, subRoot))
            return true;

        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }
    private boolean isSameTree(TreeNode p, TreeNode q){
        if (p == null && q == null) {
            return true;
        }
        Stack<TreeNode> ps = new Stack<>();
        Stack<TreeNode> qs = new Stack<>();

        ps.push(p);
        qs.push(q);
        while(!ps.isEmpty() && !qs.isEmpty()){
            TreeNode pnode = ps.pop();
            TreeNode qnode = qs.pop();

            if(pnode == null && qnode == null)
                continue;

            if(pnode == null || qnode == null || pnode.val != qnode.val)
                return false;
            
            ps.push(pnode.left);
            ps.push(pnode.right);
            qs.push(qnode.left);
            qs.push(qnode.right);
        }
        return ps.isEmpty() && qs.isEmpty();
    }
}
