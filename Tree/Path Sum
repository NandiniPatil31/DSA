// Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
// Output: true
// Explanation: The root-to-leaf path with the target sum is shown.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        Queue<TreeNode> nodeQueue = new LinkedList<>();
        Queue<Integer> sumQueue = new LinkedList<>();

        nodeQueue.add(root);
        sumQueue.add(root.val);

        while(!nodeQueue.isEmpty()){
            TreeNode curr = nodeQueue.poll();
            int currSum = sumQueue.poll();

            if(curr.left == null && curr.right == null && currSum == targetSum)
                return true;

            if(curr.left != null){
                nodeQueue.add(curr.left);
                sumQueue.add(currSum + curr.left.val);
            }
            if(curr.right != null){
                nodeQueue.add(curr.right);
                sumQueue.add(currSum + curr.right.val);
            }
        }
        return false;
    }
}
