// You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:
//To capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.
//Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
//Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0)
            return ;
        
        int rows = board.length;
        int cols = board[0].length;

        for(int i=0; i<rows; i++){
            dfs(board, i, 0);
            dfs(board, i, cols - 1);
        }
        for(int j=0; j<cols; j++){
            dfs(board, 0, j);
            dfs(board, rows - 1, j);
        }
        for(int i =0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == 'T')
                    board[i][j] = 'O';
            }
        }
    }
    private void dfs(char[][] board, int i, int j){
        int rows = board.length;
        int cols = board[0].length;

        if(i<0 || j<0 || i>=rows || j>= cols || board[i][j] != 'O')
            return ;
        
        board[i][j] = 'T';
        dfs(board, i+1, j);
        dfs(board, i-1, j);
        dfs(board, i, j+1);
        dfs(board, i, j-1);
    }
}
