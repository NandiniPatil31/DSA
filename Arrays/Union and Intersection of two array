////////////////////////////////////       INTERSECTION         ///////////////////////////////////////

static void printIntersection(int arr1[], int arr2[],
                                  int m, int n)
    {
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (i > 0
                && arr1[i] == arr1[i - 1]) {// For Handling duplicates
                i++;
                continue;
            }
            if (arr1[i] < arr2[j])
                i++;
            else if (arr2[j] < arr1[i])
                j++;
            else {
                System.out.print(arr2[j++] + " ");
                i++;
            }
        }
    }






//////////////////////////////////////////         UNION            ////////////////////////////////////////////////////////////////////

public class GFG {
	
	public static int nextDistinct(int[] arr, int x) {
		/*
		Helper function for printUnion(). This same function can also be implemented as a lambda function inside printUnion().
		This function moves to the next distinct element in the array.
		*/
		while (x < arr.length - 1 && arr[x] == arr[x + 1]) {
			x++;
		}
		return x + 1;
	}
	
	public static void printUnion(int[] arr1, int[] arr2) {
		/*
		This function prints the union of two arrays without duplicates.
		*/
		int i = 0;
		int j = 0;
		
		while (i < arr1.length && j < arr2.length) {
			if (arr1[i] < arr2[j]) {
				System.out.print(arr1[i] + " ");
				i = nextDistinct(arr1, i);
			} else if (arr1[i] > arr2[j]) {
				System.out.print(arr2[j] + " ");
				j = nextDistinct(arr2, j);
			} else {
				System.out.print(arr1[i] + " ");
				i = nextDistinct(arr1, i);
				j = nextDistinct(arr2, j);
			}
		}
		
		while (i < arr1.length) {
			System.out.print(arr1[i] + " ");
			i = nextDistinct(arr1, i);
		}
		
		while (j < arr2.length) {
			System.out.print(arr2[j] + " ");
			j = nextDistinct(arr2, j);
		}
	}
	
	public static void main(String[] args) {
		int[] arr1 = {1, 2, 2, 2, 3};
		int[] arr2 = {2, 3, 3, 4, 5, 5};
		printUnion(arr1, arr2);
	}
}





//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
	    
	    //Taking input using class Scanner
		Scanner sc=new Scanner(System.in);
		
		//Taking total count of testcases
		int t=sc.nextInt();
		sc.nextLine();
		while(t-->0)
		{
		    
		    int n,m;
		    
		    //taking size of array a
		    n=sc.nextInt();
		    
		    //taking size of array b
		    m=sc.nextInt();
		    
		    //Creating 2 array of size n and m
		    int a[]=new int[n];
		    int b[]=new int[m];
		    
		    //inserting elements to array a
		    for(int i=0;i<n;i++)
		    {
		        a[i]=sc.nextInt();
		    }
		    
		    //inserting elements to array b
		    for(int i=0;i<m;i++)
		    {
		        b[i]=sc.nextInt();
		    }
		    Solution ob=new Solution();
		    //calling doUnion method and printing the results
		    System.out.println(ob.doUnion(a,n,b,m));
		}
		
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    public static int doUnion(int a[], int n, int b[], int m) 
    {
        //Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        
        //Inserting the first array into map
        for(int i=0; i<n; i++){
            
            if(map.containsKey(a[i])){
                map.put(a[i], map.get(a[i]) +1);
            }
            else
                map.put(a[i] , 1);
        }
        
        for(int j=0; j<m; j++){
            if(map.containsKey(b[j])){
                map.put(b[j], map.get(b[j]) +1);
            }
            else
                map.put(b[j] , 1);
        }
        
        return map.size();
    }
}
