//Leetcode problem
//Input: nums = [5,2,6,1]
//Output: [2,1,1,0]
//Explanation:
//To the right of 5 there are 2 smaller elements (2 and 1).
//To the right of 2 there is only 1 smaller element (1).
//To the right of 6 there is 1 smaller element (1).
//To the right of 1 there is 0 smaller element.

class Solution {
    int[] count;
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> res = new ArrayList<>();

        count = new int[nums.length];
        int[] indexes = new int[nums.length];
        for(int i=0; i<nums.length; i++)
            indexes[i] = i;

        mergesort(nums, indexes, 0, nums.length-1);
        for(int i=0; i<count.length; i++)
            res.add(count[i]);
        return res;
    }
    private void mergesort(int[] nums, int[] indexes, int start, int end){
        if(end<=start)
            return;
        
        int mid = (start + end)/2;
        mergesort(nums, indexes, start, mid);
        mergesort(nums, indexes, mid+1, end);

        merge(nums, indexes, start, end);
    }

    private void merge(int[] nums, int[] indexes, int start, int end){
        int mid = (start+end)/2;
        int left_idx = start;
        int right_idx = mid+1;
        int rightcount = 0;
        int[] new_idx = new int[end-start + 1];

        int sort_idx = 0;
        while(left_idx <= mid && right_idx <= end){
            if(nums[indexes[right_idx]] < nums[indexes[left_idx]]){
                new_idx[sort_idx] = indexes[right_idx];
                rightcount++;
                right_idx++;
            }else{
                new_idx[sort_idx] = indexes[left_idx];
                count[indexes[left_idx]] += rightcount;
                left_idx++;
            }
            sort_idx++;
        }
        while(left_idx <= mid){
            new_idx[sort_idx] = indexes[left_idx];
            count[indexes[left_idx]] += rightcount;
            left_idx++;
            sort_idx++;
        }
        while(right_idx <= end){
            new_idx[sort_idx++] = indexes[right_idx++];
        }
        for(int i =start; i<= end; i++)
            indexes[i] = new_idx[i-start];
    }
}
