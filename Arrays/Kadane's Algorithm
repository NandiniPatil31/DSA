/////////////////////        SOLUTION with easy names ///////////////////

public static int maxSubArraySum(int[] a)
    {
        int size = a.length;
        int maxi = Integer.MIN_VALUE, sum  = 0;
 
        for (int i = 0; i < size; i++) {
            sum = sum + a[i];
            if (maxi < sum)
                maxi = sum;
            if (sum < 0)
                sum = 0;
        }
        return maxi;
    }


////////////////////  DP SOLUTION 2 //////////////////////

class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
            
        int arr[] = new int[nums.length];
        arr[0] = nums[0];
        
        for(int i=1; i<nums.length; i++){
            arr[i] = Math.max(nums[i], (nums[i]+arr[i-1]));
        }
        int max = Integer.MIN_VALUE;
        for(int i : arr){
            max = (i > max) ? i : max;
        }
        return max;
    }
}



////////////////////////////  SOLUTION1 //////////////////


import java.io.*;

class GFG{
    public static int maxSubArraySum(int[] a)
    {
        int size = a.length;
        int max_so_far = Integer.MIN_VALUE, max_ending_here
                                            = 0;
 
        for (int i = 0; i < size; i++) {
            max_ending_here = max_ending_here + a[i];
            if (max_so_far < max_ending_here)
                max_so_far = max_ending_here;
            if (max_ending_here < 0)
                max_ending_here = 0;
        }
        return max_so_far;
    }
    
    public static void main(String[] args) {
        int[] arr = {1,2,3,-2,5};
        //int n = arr.length;
        
        System.out.println("Maximum contiguous sum is "
                           + maxSubArraySum(arr));
    }
} 
