/////////////////////        SOLUTION with easy names ///////////////////

public static int maxSubArraySum(int[] a)
    {
        int size = a.length;
        int maxi = Integer.MIN_VALUE, sum  = 0;
 
        for (int i = 0; i < size; i++) {
            sum = sum + a[i];
            if (maxi < sum)
                maxi = sum;
            if (sum < 0)
                sum = 0;
        }
        return maxi;
    }


////////////////////  SOLUTION 2 //////////////////////
static void maxSubArraySum(int a[], int size)
    {
        int max_so_far = Integer.MIN_VALUE,
            max_ending_here = 0, start = 0, end = 0, s = 0;
 
        for (int i = 0; i < size; i++) {
            max_ending_here += a[i];
 
            if (max_so_far < max_ending_here) {
                max_so_far = max_ending_here;
                start = s;
                end = i;
            }
 
            if (max_ending_here < 0) {
                max_ending_here = 0;
                s = i + 1;
            }
        }
        System.out.println("Maximum contiguous sum is "
                           + max_so_far);
        System.out.println("Starting index " + start);
}



////////////////////////////  SOLUTION1 //////////////////


import java.io.*;

class GFG{
    public static int maxSubArraySum(int[] a)
    {
        int size = a.length;
        int max_so_far = Integer.MIN_VALUE, max_ending_here
                                            = 0;
 
        for (int i = 0; i < size; i++) {
            max_ending_here = max_ending_here + a[i];
            if (max_so_far < max_ending_here)
                max_so_far = max_ending_here;
            if (max_ending_here < 0)
                max_ending_here = 0;
        }
        return max_so_far;
    }
    
    public static void main(String[] args) {
        int[] arr = {1,2,3,-2,5};
        //int n = arr.length;
        
        System.out.println("Maximum contiguous sum is "
                           + maxSubArraySum(arr));
    }
} 
