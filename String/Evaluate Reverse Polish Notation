// Input: tokens = ["2","1","+","3","*"]
// Output: 9
// Explanation: ((2 + 1) * 3) = 9


class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer>st = new Stack<>();
        
        for(String str : tokens){
            if(isOperator(str)){
                int a = st.pop();
                int b = st.pop();
                int result = calculateToken(str, a, b);
                st.push(result);
            }
            else{
                st.push(Integer.parseInt(str));
            }
        }
        return st.pop();
    }
    private boolean isOperator(String str){
        return str.equals("+") || str.equals("-") ||
               str.equals("*") || str.equals("/");
    }
    private int calculateToken(String str, int a, int b){
        switch (str) {
            case "+": return a + b;
            case "-": return b - a;
            case "*": return a * b;
            case "/": return b / a; // Integer division truncates towards zero
            default: throw new IllegalArgumentException("Invalid operator: " + str);
        }
    } 
}
